   1               		.file	"AudioInput.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.LEDs_SetAllLEDs,"ax",@progbits
  13               	LEDs_SetAllLEDs:
  14               	.LFB8:
  15               		.file 1 "../../../../LUFA/Drivers/Board/USBKEY/LEDs.h"
   1:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** /*
   2:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****              LUFA Library
   3:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****      Copyright (C) Dean Camera, 2010.
   4:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****               
   5:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****       www.fourwalledcubicle.com
   7:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** */
   8:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
   9:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** /*
  10:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  12:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   without fee, provided that the above copyright notice appear in 
  15:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   documentation, and that the name of the author not be used in 
  18:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   advertising or publicity pertaining to distribution of the 
  19:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  21:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****   this software.
  29:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** */
  30:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  31:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** /** \file
  32:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *  \brief Board specific LED driver header for the USBKEY.
  33:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *
  34:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *  Board specific LED driver header for the USBKEY.
  35:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *
  36:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *        dispatch header located in LUFA/Drivers/Board/LEDs.h.
  38:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  */
  39:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  40:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** /** \ingroup Group_LEDs
  41:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *  @defgroup Group_LEDs_USBKEY USBKEY
  42:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *
  43:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *  Board specific LED driver header for the USBKEY.
  44:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *
  45:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  46:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *        dispatch header located in LUFA/Drivers/Board/LEDs.h.
  47:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *
  48:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  *  @{
  49:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h ****  */
  50:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  51:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** #ifndef __LEDS_USBKEY_H__
  52:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** #define __LEDS_USBKEY_H__
  53:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  54:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 	/* Includes: */
  55:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		#include <avr/io.h>
  56:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  57:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		#include "../../../Common/Common.h"
  58:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  59:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 	/* Enable C linkage for C++ Compilers: */
  60:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		#if defined(__cplusplus)
  61:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			extern "C" {
  62:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		#endif
  63:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  64:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 	/* Preprocessor Checks: */
  65:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		#if !defined(__INCLUDE_FROM_LEDS_H)
  66:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Board/LEDS.h instead.
  67:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		#endif
  68:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  69:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 	/* Public Interface - May be used in end-application: */
  70:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		/* Macros: */
  71:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			/** LED mask for the first LED on the board. */
  72:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			#define LEDS_LED1        (1 << 4)
  73:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  74:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			/** LED mask for the second LED on the board. */
  75:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			#define LEDS_LED2        (1 << 5)
  76:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  77:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			/** LED mask for the third LED on the board. */
  78:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			#define LEDS_LED3        (1 << 7)
  79:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  80:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			/** LED mask for the fourth LED on the board. */
  81:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			#define LEDS_LED4        (1 << 6)
  82:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  83:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			/** LED mask for all the LEDs on the board. */
  84:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			#define LEDS_ALL_LEDS    (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4)
  85:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  86:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			/** LED mask for the none of the board LEDs. */
  87:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			#define LEDS_NO_LEDS     0
  88:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
  89:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		/* Inline Functions: */
  90:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 		#if !defined(__DOXYGEN__)
  91:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			static inline void LEDs_Init(void)
  92:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			{
  93:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 				DDRD  |=  LEDS_ALL_LEDS;
  94:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 				PORTD &= ~LEDS_ALL_LEDS;
  95:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			}
  96:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			
  97:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
  98:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			{
  99:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 				PORTD |= LEDMask;
 100:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			}
 101:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
 102:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
 103:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			{
 104:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 				PORTD &= ~LEDMask;
 105:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			}
 106:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 
 107:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
 108:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 			{
  16               		.loc 1 108 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 109:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
  23               		.loc 1 109 0
  24 0000 9BB1      		in r25,0xb
  25 0002 9F70      		andi r25,lo8(15)
  26 0004 982B      		or r25,r24
  27 0006 9BB9      		out 0xb,r25
  28 0008 0895      		ret
  29               		.cfi_endproc
  30               	.LFE8:
  32               		.section	.text.SetupHardware,"ax",@progbits
  33               	.global	SetupHardware
  35               	SetupHardware:
  36               	.LFB97:
  37               		.file 2 "AudioInput.c"
   1:AudioInput.c  **** /*
   2:AudioInput.c  ****              LUFA Library
   3:AudioInput.c  ****      Copyright (C) Dean Camera, 2010.
   4:AudioInput.c  ****               
   5:AudioInput.c  ****   dean [at] fourwalledcubicle [dot] com
   6:AudioInput.c  ****       www.fourwalledcubicle.com
   7:AudioInput.c  **** */
   8:AudioInput.c  **** 
   9:AudioInput.c  **** /*
  10:AudioInput.c  ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:AudioInput.c  **** 
  12:AudioInput.c  ****   Permission to use, copy, modify, distribute, and sell this 
  13:AudioInput.c  ****   software and its documentation for any purpose is hereby granted
  14:AudioInput.c  ****   without fee, provided that the above copyright notice appear in 
  15:AudioInput.c  ****   all copies and that both that the copyright notice and this
  16:AudioInput.c  ****   permission notice and warranty disclaimer appear in supporting 
  17:AudioInput.c  ****   documentation, and that the name of the author not be used in 
  18:AudioInput.c  ****   advertising or publicity pertaining to distribution of the 
  19:AudioInput.c  ****   software without specific, written prior permission.
  20:AudioInput.c  **** 
  21:AudioInput.c  ****   The author disclaim all warranties with regard to this
  22:AudioInput.c  ****   software, including all implied warranties of merchantability
  23:AudioInput.c  ****   and fitness.  In no event shall the author be liable for any
  24:AudioInput.c  ****   special, indirect or consequential damages or any damages
  25:AudioInput.c  ****   whatsoever resulting from loss of use, data or profits, whether
  26:AudioInput.c  ****   in an action of contract, negligence or other tortious action,
  27:AudioInput.c  ****   arising out of or in connection with the use or performance of
  28:AudioInput.c  ****   this software.
  29:AudioInput.c  **** */
  30:AudioInput.c  **** 
  31:AudioInput.c  **** /** \file
  32:AudioInput.c  ****  *
  33:AudioInput.c  ****  *  Main source file for the AudioInput demo. This file contains the main tasks of
  34:AudioInput.c  ****  *  the demo and is responsible for the initial application hardware configuration.
  35:AudioInput.c  ****  */
  36:AudioInput.c  **** 
  37:AudioInput.c  **** #include "AudioInput.h"
  38:AudioInput.c  **** 
  39:AudioInput.c  **** /** LUFA Audio Class driver interface configuration and state information. This structure is
  40:AudioInput.c  ****  *  passed to all Audio Class driver functions, so that multiple instances of the same class
  41:AudioInput.c  ****  *  within a device can be differentiated from one another.
  42:AudioInput.c  ****  */
  43:AudioInput.c  **** USB_ClassInfo_Audio_Device_t Microphone_Audio_Interface =
  44:AudioInput.c  **** 	{
  45:AudioInput.c  **** 		.Config =
  46:AudioInput.c  **** 			{
  47:AudioInput.c  **** 				.StreamingInterfaceNumber = 1,
  48:AudioInput.c  **** 
  49:AudioInput.c  **** 				.DataINEndpointNumber     = AUDIO_STREAM_EPNUM,
  50:AudioInput.c  **** 				.DataINEndpointSize       = AUDIO_STREAM_EPSIZE,
  51:AudioInput.c  **** 			},
  52:AudioInput.c  **** 	};
  53:AudioInput.c  **** 
  54:AudioInput.c  **** /** Main program entry point. This routine contains the overall program flow, including initial
  55:AudioInput.c  ****  *  setup of all components and the main program loop.
  56:AudioInput.c  ****  */
  57:AudioInput.c  **** int main(void)
  58:AudioInput.c  **** {
  59:AudioInput.c  **** 	SetupHardware();
  60:AudioInput.c  **** 
  61:AudioInput.c  **** 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
  62:AudioInput.c  **** 	sei();
  63:AudioInput.c  **** 	
  64:AudioInput.c  **** 	for (;;)
  65:AudioInput.c  **** 	{
  66:AudioInput.c  **** 		ProcessNextSample();
  67:AudioInput.c  **** 
  68:AudioInput.c  **** 		Audio_Device_USBTask(&Microphone_Audio_Interface);
  69:AudioInput.c  **** 		USB_USBTask();
  70:AudioInput.c  **** 	}
  71:AudioInput.c  **** }
  72:AudioInput.c  **** 
  73:AudioInput.c  **** /** Configures the board hardware and chip peripherals for the demo's functionality. */
  74:AudioInput.c  **** void SetupHardware(void)
  75:AudioInput.c  **** {
  38               		.loc 2 75 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
  76:AudioInput.c  **** 	/* Disable watchdog if enabled by bootloader/fuses */
  77:AudioInput.c  **** 	MCUSR &= ~(1 << WDRF);
  44               		.loc 2 77 0
  45 0000 84B7      		in r24,0x34
  46 0002 877F      		andi r24,lo8(-9)
  47 0004 84BF      		out 0x34,r24
  78:AudioInput.c  **** 	wdt_disable();
  48               		.loc 2 78 0
  49 0006 88E1      		ldi r24,lo8(24)
  50               	/* #APP */
  51               	 ;  78 "AudioInput.c" 1
  52 0008 0FB6      		in __tmp_reg__, __SREG__
  53 000a F894      		cli
  54 000c 8093 6000 		sts 96, r24
  55 0010 1092 6000 		sts 96, __zero_reg__
  56 0014 0FBE      		out __SREG__,__tmp_reg__
  57               		
  58               	 ;  0 "" 2
  59               	.LVL1:
  60               	/* #NOAPP */
  61               	.LBB45:
  62               	.LBB46:
  63               		.file 3 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/avr/include/avr/power.h **** 
   4:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/avr/power.h **** 
   7:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/avr/include/avr/power.h ****      distribution.
  13:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/avr/include/avr/power.h **** 
  17:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/avr/include/avr/power.h **** 
  29:/usr/lib/avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/avr/include/avr/power.h **** 
  31:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/avr/include/avr/power.h **** 
  34:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/avr/include/avr/power.h **** 
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** /** \file */
  39:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/avr/include/avr/power.h **** 
  41:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/avr/include/avr/power.h **** 
  43:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/avr/include/avr/power.h **** 
  47:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/avr/include/avr/power.h **** 
  50:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/avr/include/avr/power.h **** 
  54:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/avr/include/avr/power.h **** 
  59:/usr/lib/avr/include/avr/power.h **** */
  60:/usr/lib/avr/include/avr/power.h **** 
  61:/usr/lib/avr/include/avr/power.h **** 
  62:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/avr/include/avr/power.h **** 
  64:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/avr/include/avr/power.h **** <small>
  66:/usr/lib/avr/include/avr/power.h **** <center>
  67:/usr/lib/avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/avr/include/avr/power.h ****   <tr>
  69:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/avr/include/avr/power.h ****   </tr>
  73:/usr/lib/avr/include/avr/power.h **** 
  74:/usr/lib/avr/include/avr/power.h ****   <tr>
  75:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/avr/include/avr/power.h ****   </tr>
  79:/usr/lib/avr/include/avr/power.h **** 
  80:/usr/lib/avr/include/avr/power.h ****   <tr>
  81:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/avr/include/avr/power.h ****   </tr>
  85:/usr/lib/avr/include/avr/power.h **** 
  86:/usr/lib/avr/include/avr/power.h ****   <tr>
  87:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/avr/include/avr/power.h ****   </tr>
  91:/usr/lib/avr/include/avr/power.h **** 
  92:/usr/lib/avr/include/avr/power.h ****   <tr>
  93:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/avr/include/avr/power.h ****   </tr>
  97:/usr/lib/avr/include/avr/power.h **** 
  98:/usr/lib/avr/include/avr/power.h ****   <tr>
  99:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/avr/include/avr/power.h ****   </tr>
 103:/usr/lib/avr/include/avr/power.h **** 
 104:/usr/lib/avr/include/avr/power.h ****   <tr>
 105:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/avr/include/avr/power.h ****   </tr>
 109:/usr/lib/avr/include/avr/power.h **** 
 110:/usr/lib/avr/include/avr/power.h ****   <tr>
 111:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/avr/include/avr/power.h ****   </tr>
 115:/usr/lib/avr/include/avr/power.h **** 
 116:/usr/lib/avr/include/avr/power.h ****   <tr>
 117:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/avr/include/avr/power.h ****   </tr>
 121:/usr/lib/avr/include/avr/power.h **** 
 122:/usr/lib/avr/include/avr/power.h ****   <tr>
 123:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/avr/include/avr/power.h ****   </tr>
 127:/usr/lib/avr/include/avr/power.h **** 
 128:/usr/lib/avr/include/avr/power.h ****   <tr>
 129:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/avr/include/avr/power.h ****   </tr>
 133:/usr/lib/avr/include/avr/power.h **** 
 134:/usr/lib/avr/include/avr/power.h ****   <tr>
 135:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/avr/include/avr/power.h ****   </tr>
 139:/usr/lib/avr/include/avr/power.h **** 
 140:/usr/lib/avr/include/avr/power.h ****   <tr>
 141:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/avr/include/avr/power.h ****   </tr>
 145:/usr/lib/avr/include/avr/power.h **** 
 146:/usr/lib/avr/include/avr/power.h ****   <tr>
 147:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/avr/include/avr/power.h ****   </tr>
 151:/usr/lib/avr/include/avr/power.h **** 
 152:/usr/lib/avr/include/avr/power.h ****   <tr>
 153:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/avr/include/avr/power.h ****   </tr>
 157:/usr/lib/avr/include/avr/power.h **** 
 158:/usr/lib/avr/include/avr/power.h ****   <tr>
 159:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/avr/include/avr/power.h ****   </tr>
 163:/usr/lib/avr/include/avr/power.h **** 
 164:/usr/lib/avr/include/avr/power.h ****   <tr>
 165:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/avr/include/avr/power.h ****   </tr>
 169:/usr/lib/avr/include/avr/power.h **** 
 170:/usr/lib/avr/include/avr/power.h ****   <tr>
 171:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/avr/include/avr/power.h ****   </tr>
 175:/usr/lib/avr/include/avr/power.h **** 
 176:/usr/lib/avr/include/avr/power.h ****   <tr>
 177:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/avr/include/avr/power.h ****   </tr>
 181:/usr/lib/avr/include/avr/power.h **** 
 182:/usr/lib/avr/include/avr/power.h ****   <tr>
 183:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/avr/include/avr/power.h ****   </tr>
 187:/usr/lib/avr/include/avr/power.h **** 
 188:/usr/lib/avr/include/avr/power.h ****   <tr>
 189:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/avr/include/avr/power.h ****   </tr>
 193:/usr/lib/avr/include/avr/power.h **** 
 194:/usr/lib/avr/include/avr/power.h ****   <tr>
 195:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/avr/include/avr/power.h ****   </tr>
 199:/usr/lib/avr/include/avr/power.h **** 
 200:/usr/lib/avr/include/avr/power.h ****   <tr>
 201:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/avr/include/avr/power.h ****   </tr>
 205:/usr/lib/avr/include/avr/power.h **** 
 206:/usr/lib/avr/include/avr/power.h ****   <tr>
 207:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/avr/include/avr/power.h ****   </tr>
 211:/usr/lib/avr/include/avr/power.h **** 
 212:/usr/lib/avr/include/avr/power.h ****   <tr>
 213:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/avr/include/avr/power.h ****   </tr>
 217:/usr/lib/avr/include/avr/power.h **** 
 218:/usr/lib/avr/include/avr/power.h ****   <tr>
 219:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/avr/include/avr/power.h ****   </tr>
 223:/usr/lib/avr/include/avr/power.h **** 
 224:/usr/lib/avr/include/avr/power.h ****   <tr>
 225:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/avr/include/avr/power.h ****   </tr>
 229:/usr/lib/avr/include/avr/power.h **** 
 230:/usr/lib/avr/include/avr/power.h ****   <tr>
 231:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/avr/include/avr/power.h ****   </tr>
 235:/usr/lib/avr/include/avr/power.h **** 
 236:/usr/lib/avr/include/avr/power.h ****   <tr>
 237:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/avr/include/avr/power.h ****   </tr>
 241:/usr/lib/avr/include/avr/power.h **** 
 242:/usr/lib/avr/include/avr/power.h ****   <tr>
 243:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/avr/include/avr/power.h ****   </tr>
 247:/usr/lib/avr/include/avr/power.h **** 
 248:/usr/lib/avr/include/avr/power.h ****   <tr>
 249:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/avr/include/avr/power.h ****   </tr>
 253:/usr/lib/avr/include/avr/power.h **** 
 254:/usr/lib/avr/include/avr/power.h ****   <tr>
 255:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/avr/include/avr/power.h ****   </tr>
 259:/usr/lib/avr/include/avr/power.h **** 
 260:/usr/lib/avr/include/avr/power.h ****   <tr>
 261:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/avr/include/avr/power.h ****   </tr>
 265:/usr/lib/avr/include/avr/power.h **** 
 266:/usr/lib/avr/include/avr/power.h ****   <tr>
 267:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/avr/include/avr/power.h ****   </tr>
 271:/usr/lib/avr/include/avr/power.h **** 
 272:/usr/lib/avr/include/avr/power.h ****   <tr>
 273:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/avr/include/avr/power.h ****   </tr>
 277:/usr/lib/avr/include/avr/power.h **** 
 278:/usr/lib/avr/include/avr/power.h ****   <tr>
 279:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/avr/include/avr/power.h ****   </tr>
 283:/usr/lib/avr/include/avr/power.h **** 
 284:/usr/lib/avr/include/avr/power.h ****   <tr>
 285:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/avr/include/avr/power.h ****   </tr>
 289:/usr/lib/avr/include/avr/power.h **** 
 290:/usr/lib/avr/include/avr/power.h ****   <tr>
 291:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/avr/include/avr/power.h ****   </tr>
 295:/usr/lib/avr/include/avr/power.h **** 
 296:/usr/lib/avr/include/avr/power.h ****   <tr>
 297:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/avr/include/avr/power.h ****   </tr>
 301:/usr/lib/avr/include/avr/power.h **** 
 302:/usr/lib/avr/include/avr/power.h ****   <tr>
 303:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/avr/include/avr/power.h ****   </tr>
 307:/usr/lib/avr/include/avr/power.h **** 
 308:/usr/lib/avr/include/avr/power.h ****   <tr>
 309:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/avr/include/avr/power.h ****   </tr>
 313:/usr/lib/avr/include/avr/power.h **** 
 314:/usr/lib/avr/include/avr/power.h ****   <tr>
 315:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/avr/include/avr/power.h ****   </tr>
 319:/usr/lib/avr/include/avr/power.h **** 
 320:/usr/lib/avr/include/avr/power.h ****   <tr>
 321:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/avr/include/avr/power.h ****   </tr>
 325:/usr/lib/avr/include/avr/power.h **** 
 326:/usr/lib/avr/include/avr/power.h ****   <tr>
 327:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/avr/include/avr/power.h ****   </tr>
 331:/usr/lib/avr/include/avr/power.h **** 
 332:/usr/lib/avr/include/avr/power.h ****   <tr>
 333:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/avr/include/avr/power.h ****   </tr>
 337:/usr/lib/avr/include/avr/power.h **** 
 338:/usr/lib/avr/include/avr/power.h ****   <tr>
 339:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/avr/include/avr/power.h ****   </tr>
 343:/usr/lib/avr/include/avr/power.h **** 
 344:/usr/lib/avr/include/avr/power.h ****   <tr>
 345:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/avr/include/avr/power.h ****   </tr>
 349:/usr/lib/avr/include/avr/power.h **** </table>
 350:/usr/lib/avr/include/avr/power.h **** </center>
 351:/usr/lib/avr/include/avr/power.h **** </small>
 352:/usr/lib/avr/include/avr/power.h **** 
 353:/usr/lib/avr/include/avr/power.h **** @} */
 354:/usr/lib/avr/include/avr/power.h **** 
 355:/usr/lib/avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/avr/include/avr/power.h **** 
 369:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/avr/include/avr/power.h **** 
 372:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/avr/include/avr/power.h **** 
 375:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/avr/include/avr/power.h **** 
 378:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/avr/include/avr/power.h **** 
 383:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/avr/include/avr/power.h **** 
 392:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/avr/include/avr/power.h **** do { \
 394:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/avr/include/avr/power.h **** } while(0)
 402:/usr/lib/avr/include/avr/power.h **** 
 403:/usr/lib/avr/include/avr/power.h **** 
 404:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/avr/include/avr/power.h **** do { \
 406:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/avr/include/avr/power.h **** } while(0)
 414:/usr/lib/avr/include/avr/power.h **** #endif
 415:/usr/lib/avr/include/avr/power.h **** 
 416:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/avr/include/avr/power.h **** 
 433:/usr/lib/avr/include/avr/power.h **** 
 434:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/avr/include/avr/power.h **** 
 437:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/avr/include/avr/power.h **** 
 440:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/avr/include/avr/power.h **** 
 445:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/avr/include/avr/power.h **** 
 450:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/avr/include/avr/power.h **** 
 459:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/avr/include/avr/power.h **** 
 468:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/avr/include/avr/power.h **** 
 477:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/avr/include/avr/power.h **** 
 486:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/avr/include/avr/power.h **** 
 495:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/avr/include/avr/power.h **** 
 504:/usr/lib/avr/include/avr/power.h **** #endif
 505:/usr/lib/avr/include/avr/power.h **** 
 506:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/avr/include/avr/power.h **** 
 512:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/avr/include/avr/power.h **** do { \
 514:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/avr/include/avr/power.h **** } while(0)
 522:/usr/lib/avr/include/avr/power.h **** 
 523:/usr/lib/avr/include/avr/power.h **** 
 524:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/avr/include/avr/power.h **** do { \
 526:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/avr/include/avr/power.h **** } while(0)
 534:/usr/lib/avr/include/avr/power.h **** 
 535:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/avr/include/avr/power.h **** 
 541:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/avr/include/avr/power.h **** 
 544:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/avr/include/avr/power.h **** 
 547:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/avr/include/avr/power.h **** 
 550:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/avr/include/avr/power.h **** 
 553:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/avr/include/avr/power.h **** 
 556:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/avr/include/avr/power.h **** 
 559:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/avr/include/avr/power.h **** 
 562:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/avr/include/avr/power.h **** 
 565:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/avr/include/avr/power.h **** 
 568:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/avr/include/avr/power.h **** 
 571:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/avr/include/avr/power.h **** 
 574:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/avr/include/avr/power.h **** 
 577:/usr/lib/avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/avr/include/avr/power.h **** 
 580:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/avr/include/avr/power.h **** do{ \
 582:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/avr/include/avr/power.h **** }while(0)
 585:/usr/lib/avr/include/avr/power.h **** 
 586:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/avr/include/avr/power.h **** do{ \
 588:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/avr/include/avr/power.h **** }while(0)
 591:/usr/lib/avr/include/avr/power.h **** 
 592:/usr/lib/avr/include/avr/power.h **** 
 593:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/avr/include/avr/power.h **** 
 595:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/avr/include/avr/power.h **** 
 598:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/avr/include/avr/power.h **** 
 601:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/avr/include/avr/power.h **** 
 604:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/avr/include/avr/power.h **** 
 607:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/avr/include/avr/power.h **** 
 610:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/avr/include/avr/power.h **** 
 613:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/avr/include/avr/power.h **** 
 616:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/avr/include/avr/power.h **** 
 619:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/avr/include/avr/power.h **** 
 622:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** 
 625:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/avr/include/avr/power.h **** 
 628:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/avr/include/avr/power.h **** do{ \
 630:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/avr/include/avr/power.h **** }while(0)
 633:/usr/lib/avr/include/avr/power.h **** 
 634:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/avr/include/avr/power.h **** do{ \
 636:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/avr/include/avr/power.h **** }while(0)
 639:/usr/lib/avr/include/avr/power.h **** 
 640:/usr/lib/avr/include/avr/power.h **** 
 641:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/avr/include/avr/power.h **** 
 646:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/avr/include/avr/power.h **** 
 649:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/avr/include/avr/power.h **** 
 652:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/avr/include/avr/power.h **** 
 655:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/avr/include/avr/power.h **** 
 658:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/avr/include/avr/power.h **** 
 661:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/avr/include/avr/power.h **** 
 664:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/avr/include/avr/power.h **** 
 667:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/avr/include/avr/power.h **** 
 670:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/avr/include/avr/power.h **** 
 673:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/avr/include/avr/power.h **** do{ \
 675:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/avr/include/avr/power.h **** }while(0)
 678:/usr/lib/avr/include/avr/power.h **** 
 679:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/avr/include/avr/power.h **** do{ \
 681:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/avr/include/avr/power.h **** }while(0)
 684:/usr/lib/avr/include/avr/power.h **** 
 685:/usr/lib/avr/include/avr/power.h **** 
 686:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/avr/include/avr/power.h **** 
 689:/usr/lib/avr/include/avr/power.h **** 
 690:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/avr/include/avr/power.h **** 
 693:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/avr/include/avr/power.h **** 
 696:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/avr/include/avr/power.h **** 
 699:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/avr/include/avr/power.h **** 
 702:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/avr/include/avr/power.h **** 
 705:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/avr/include/avr/power.h **** 
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/avr/include/avr/power.h **** 
 711:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/avr/include/avr/power.h **** 
 714:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/avr/include/avr/power.h **** 
 717:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/avr/include/avr/power.h **** 
 720:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/avr/include/avr/power.h **** do{ \
 722:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/avr/include/avr/power.h **** }while(0)
 725:/usr/lib/avr/include/avr/power.h **** 
 726:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/avr/include/avr/power.h **** do{ \
 728:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/avr/include/avr/power.h **** }while(0)
 731:/usr/lib/avr/include/avr/power.h **** 
 732:/usr/lib/avr/include/avr/power.h **** 
 733:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/avr/include/avr/power.h **** 
 735:/usr/lib/avr/include/avr/power.h **** 
 736:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/avr/include/avr/power.h **** 
 739:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/avr/include/avr/power.h **** 
 742:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/avr/include/avr/power.h **** 
 745:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/avr/include/avr/power.h **** 
 748:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/avr/include/avr/power.h **** 
 751:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/avr/include/avr/power.h **** 
 754:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/avr/include/avr/power.h **** 
 757:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/avr/include/avr/power.h **** 
 760:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/avr/include/avr/power.h **** 
 763:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/avr/include/avr/power.h **** do{ \
 765:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/avr/include/avr/power.h **** }while(0)
 768:/usr/lib/avr/include/avr/power.h **** 
 769:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/avr/include/avr/power.h **** do{ \
 771:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/avr/include/avr/power.h **** }while(0)
 774:/usr/lib/avr/include/avr/power.h **** 
 775:/usr/lib/avr/include/avr/power.h **** 
 776:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/avr/include/avr/power.h **** 
 778:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/avr/include/avr/power.h **** 
 781:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/avr/include/avr/power.h **** 
 784:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/avr/include/avr/power.h **** 
 787:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/avr/include/avr/power.h **** 
 790:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/avr/include/avr/power.h **** 
 794:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/avr/include/avr/power.h **** 
 798:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/avr/include/avr/power.h **** 
 802:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/avr/include/avr/power.h **** 
 805:/usr/lib/avr/include/avr/power.h **** 
 806:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/avr/include/avr/power.h **** 
 813:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/avr/include/avr/power.h **** 
 816:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/avr/include/avr/power.h **** 
 819:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/avr/include/avr/power.h **** 
 822:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/avr/include/avr/power.h **** 
 825:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/avr/include/avr/power.h **** 
 828:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/avr/include/avr/power.h **** 
 832:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/avr/include/avr/power.h **** 
 836:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/avr/include/avr/power.h **** 
 840:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/avr/include/avr/power.h **** 
 843:/usr/lib/avr/include/avr/power.h **** 
 844:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/avr/include/avr/power.h **** 
 846:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/avr/include/avr/power.h **** 
 849:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/avr/include/avr/power.h **** 
 852:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/avr/include/avr/power.h **** 
 855:/usr/lib/avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/avr/include/avr/power.h **** 
 859:/usr/lib/avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/avr/include/avr/power.h **** 
 863:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/avr/include/avr/power.h **** 
 866:/usr/lib/avr/include/avr/power.h **** 
 867:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/avr/include/avr/power.h **** 
 881:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/avr/include/avr/power.h **** 
 884:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/avr/include/avr/power.h **** 
 887:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/avr/include/avr/power.h **** 
 890:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/avr/include/avr/power.h **** 
 893:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/avr/include/avr/power.h **** 
 896:/usr/lib/avr/include/avr/power.h **** 
 897:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/avr/include/avr/power.h **** 
 915:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/avr/include/avr/power.h **** 
 918:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/avr/include/avr/power.h **** 
 921:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/avr/include/avr/power.h **** 
 924:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/avr/include/avr/power.h **** 
 927:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/avr/include/avr/power.h **** 
 930:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/avr/include/avr/power.h **** 
 933:/usr/lib/avr/include/avr/power.h **** 
 934:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/avr/include/avr/power.h **** 
 943:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/avr/include/avr/power.h **** 
 946:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/avr/include/avr/power.h **** 
 949:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/avr/include/avr/power.h **** 
 952:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/avr/include/avr/power.h **** 
 955:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/avr/include/avr/power.h **** 
 958:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/avr/include/avr/power.h **** 
 961:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/avr/include/avr/power.h **** 
 964:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/avr/include/avr/power.h **** 
 967:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/avr/include/avr/power.h **** 
 970:/usr/lib/avr/include/avr/power.h **** 
 971:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/avr/include/avr/power.h **** 
 973:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/avr/include/avr/power.h **** 
 976:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/avr/include/avr/power.h **** 
 979:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/avr/include/avr/power.h **** 
 982:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/avr/include/avr/power.h **** 
 985:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/avr/include/avr/power.h **** 
 988:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/avr/include/avr/power.h **** 
 991:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/avr/include/avr/power.h **** 
 994:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/avr/include/avr/power.h **** 
 997:/usr/lib/avr/include/avr/power.h **** 
 998:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/avr/include/avr/power.h **** 
1000:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/avr/include/avr/power.h **** 
1003:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/avr/include/avr/power.h **** 
1006:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/avr/include/avr/power.h **** 
1009:/usr/lib/avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/avr/include/avr/power.h **** 
1013:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/avr/include/avr/power.h **** 
1016:/usr/lib/avr/include/avr/power.h **** 
1017:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/avr/include/avr/power.h **** 
1032:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/avr/include/avr/power.h **** 
1035:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/avr/include/avr/power.h **** 
1038:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/avr/include/avr/power.h **** 
1041:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/avr/include/avr/power.h **** 
1044:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/avr/include/avr/power.h **** 
1047:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/avr/include/avr/power.h **** 
1050:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/avr/include/avr/power.h **** 
1053:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/avr/include/avr/power.h **** 
1056:/usr/lib/avr/include/avr/power.h **** 
1057:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/avr/include/avr/power.h **** 
1074:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/avr/include/avr/power.h **** 
1077:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/avr/include/avr/power.h **** 
1080:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/avr/include/avr/power.h **** 
1083:/usr/lib/avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/avr/include/avr/power.h **** 
1087:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/avr/include/avr/power.h **** 
1090:/usr/lib/avr/include/avr/power.h **** 
1091:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/avr/include/avr/power.h **** 
1093:/usr/lib/avr/include/avr/power.h **** 
1094:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/avr/include/avr/power.h **** 
1097:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/avr/include/avr/power.h **** 
1100:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/avr/include/avr/power.h **** 
1103:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/avr/include/avr/power.h **** 
1106:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/avr/include/avr/power.h **** 
1109:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/avr/include/avr/power.h **** 
1112:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/avr/include/avr/power.h **** 
1115:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/avr/include/avr/power.h **** 
1118:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/avr/include/avr/power.h **** 
1121:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/avr/include/avr/power.h **** do{ \
1123:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/avr/include/avr/power.h **** }while(0)
1126:/usr/lib/avr/include/avr/power.h **** 
1127:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/avr/include/avr/power.h **** do{ \
1129:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/avr/include/avr/power.h **** }while(0)
1132:/usr/lib/avr/include/avr/power.h **** 
1133:/usr/lib/avr/include/avr/power.h **** 
1134:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/avr/include/avr/power.h **** 
1139:/usr/lib/avr/include/avr/power.h **** 
1140:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/avr/include/avr/power.h **** 
1143:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/avr/include/avr/power.h **** 
1146:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/avr/include/avr/power.h **** 
1149:/usr/lib/avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/avr/include/avr/power.h **** 
1153:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/avr/include/avr/power.h **** 
1156:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/avr/include/avr/power.h **** 
1159:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/avr/include/avr/power.h **** 
1162:/usr/lib/avr/include/avr/power.h **** 
1163:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/avr/include/avr/power.h **** 
1169:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/avr/include/avr/power.h **** 
1172:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/avr/include/avr/power.h **** 
1175:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/avr/include/avr/power.h **** 
1178:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/avr/include/avr/power.h **** 
1181:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/avr/include/avr/power.h **** 
1184:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/avr/include/avr/power.h **** 
1190:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/avr/include/avr/power.h **** 
1193:/usr/lib/avr/include/avr/power.h **** 
1194:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/avr/include/avr/power.h **** 
1197:/usr/lib/avr/include/avr/power.h **** 
1198:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/avr/include/avr/power.h **** 
1201:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/avr/include/avr/power.h **** 
1204:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/avr/include/avr/power.h **** 
1207:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/avr/include/avr/power.h **** 
1210:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/avr/include/avr/power.h **** 
1213:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/avr/include/avr/power.h **** 
1216:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/avr/include/avr/power.h **** 
1219:/usr/lib/avr/include/avr/power.h **** 
1220:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/avr/include/avr/power.h **** 
1226:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/avr/include/avr/power.h **** 
1229:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/avr/include/avr/power.h **** 
1232:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/avr/include/avr/power.h **** 
1235:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/avr/include/avr/power.h **** 
1238:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/avr/include/avr/power.h **** 
1241:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/avr/include/avr/power.h **** do{ \
1243:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/avr/include/avr/power.h **** }while(0)
1246:/usr/lib/avr/include/avr/power.h **** 
1247:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/avr/include/avr/power.h **** do{ \
1249:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/avr/include/avr/power.h **** }while(0)
1252:/usr/lib/avr/include/avr/power.h **** 
1253:/usr/lib/avr/include/avr/power.h **** 
1254:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/avr/include/avr/power.h **** 
1256:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/avr/include/avr/power.h **** 
1259:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/avr/include/avr/power.h **** 
1262:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/avr/include/avr/power.h **** 
1265:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/avr/include/avr/power.h **** 
1268:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/avr/include/avr/power.h **** 
1271:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/avr/include/avr/power.h **** 
1274:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/avr/include/avr/power.h **** 
1277:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/avr/include/avr/power.h **** 
1280:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/avr/include/avr/power.h **** 
1283:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/avr/include/avr/power.h **** 
1286:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/avr/include/avr/power.h **** 
1289:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/avr/include/avr/power.h **** 
1292:/usr/lib/avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/avr/include/avr/power.h **** do{ \
1294:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/avr/include/avr/power.h **** }while(0)
1297:/usr/lib/avr/include/avr/power.h **** 
1298:/usr/lib/avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/avr/include/avr/power.h **** do{ \
1300:/usr/lib/avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/avr/include/avr/power.h **** }while(0)
1303:/usr/lib/avr/include/avr/power.h **** 
1304:/usr/lib/avr/include/avr/power.h **** 
1305:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/avr/include/avr/power.h **** 
1311:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/avr/include/avr/power.h **** 
1314:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/avr/include/avr/power.h **** 
1317:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/avr/include/avr/power.h **** 
1320:/usr/lib/avr/include/avr/power.h **** 
1321:/usr/lib/avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/avr/include/avr/power.h **** 
1324:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/avr/include/avr/power.h **** 
1327:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/avr/include/avr/power.h **** 
1330:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/avr/include/avr/power.h **** 
1333:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/avr/include/avr/power.h **** 
1336:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/avr/include/avr/power.h **** 
1339:/usr/lib/avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/avr/include/avr/power.h **** 
1342:/usr/lib/avr/include/avr/power.h **** #endif
1343:/usr/lib/avr/include/avr/power.h **** 
1344:/usr/lib/avr/include/avr/power.h **** 
1345:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/avr/include/avr/power.h **** 
1432:/usr/lib/avr/include/avr/power.h **** 
1433:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/avr/include/avr/power.h **** 
1435:/usr/lib/avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/avr/include/avr/power.h **** 
1440:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/avr/include/avr/power.h **** */
1443:/usr/lib/avr/include/avr/power.h **** 
1444:/usr/lib/avr/include/avr/power.h **** 
1445:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/avr/include/avr/power.h **** \code 
1447:/usr/lib/avr/include/avr/power.h **** typedef enum
1448:/usr/lib/avr/include/avr/power.h **** {
1449:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/avr/include/avr/power.h **** \endcode
1461:/usr/lib/avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/avr/include/avr/power.h **** 
1463:/usr/lib/avr/include/avr/power.h **** */
1464:/usr/lib/avr/include/avr/power.h **** typedef enum
1465:/usr/lib/avr/include/avr/power.h **** {
1466:/usr/lib/avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/avr/include/avr/power.h **** #endif
1478:/usr/lib/avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/avr/include/avr/power.h **** 
1480:/usr/lib/avr/include/avr/power.h **** 
1481:/usr/lib/avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/avr/include/avr/power.h **** 
1483:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/avr/include/avr/power.h **** 
1486:/usr/lib/avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/avr/include/avr/power.h **** 
1490:/usr/lib/avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/avr/include/avr/power.h **** */
1492:/usr/lib/avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/avr/include/avr/power.h **** {
1494:/usr/lib/avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/avr/include/avr/power.h ****     __asm__ __volatile__ (
  64               		.loc 3 1495 0
  65 0016 90E0      		ldi r25,0
  66 0018 80E8      		ldi r24,lo8(-128)
  67               	/* #APP */
  68               	 ;  1495 "/usr/lib/avr/include/avr/power.h" 1
  69 001a 0FB6      		in __tmp_reg__,__SREG__
  70 001c F894      		cli
  71 001e 8093 6100 		sts 97, r24
  72 0022 9093 6100 		sts 97, r25
  73 0026 0FBE      		out __SREG__, __tmp_reg__
  74               	 ;  0 "" 2
  75               	/* #NOAPP */
  76               	.LBE46:
  77               	.LBE45:
  78               	.LBB47:
  79               	.LBB48:
  93:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 				DDRD  |=  LEDS_ALL_LEDS;
  80               		.loc 1 93 0
  81 0028 8AB1      		in r24,0xa
  82 002a 806F      		ori r24,lo8(-16)
  83 002c 8AB9      		out 0xa,r24
  94:../../../../LUFA/Drivers/Board/USBKEY/LEDs.h **** 				PORTD &= ~LEDS_ALL_LEDS;
  84               		.loc 1 94 0
  85 002e 8BB1      		in r24,0xb
  86 0030 8F70      		andi r24,lo8(15)
  87 0032 8BB9      		out 0xb,r24
  88               	.LBE48:
  89               	.LBE47:
  79:AudioInput.c  **** 
  80:AudioInput.c  **** 	/* Disable clock division */
  81:AudioInput.c  **** 	clock_prescale_set(clock_div_1);
  82:AudioInput.c  **** 	
  83:AudioInput.c  **** 	/* Hardware Initialization */
  84:AudioInput.c  **** 	LEDs_Init();
  85:AudioInput.c  **** 	USB_Init();
  90               		.loc 2 85 0
  91 0034 0E94 0000 		call USB_Init
  92               	.LVL2:
  93               	.LBB49:
  94               	.LBB50:
  95               		.file 4 "../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h"
   1:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** /*
   2:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****              LUFA Library
   3:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****      Copyright (C) Dean Camera, 2010.
   4:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****               
   5:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****       www.fourwalledcubicle.com
   7:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** */
   8:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
   9:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** /*
  10:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  12:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   without fee, provided that the above copyright notice appear in 
  15:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   documentation, and that the name of the author not be used in 
  18:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   advertising or publicity pertaining to distribution of the 
  19:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  21:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****   this software.
  29:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** */
  30:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  31:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** /** \file
  32:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *  \brief ADC peripheral driver for the U7, U6 and U4 USB AVRs.
  33:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *
  34:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *  ADC driver for the AT90USB1287, AT90USB1286, AT90USB647, AT90USB646, ATMEGA16U4 and ATMEGA32U4 
  35:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *
  36:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *        dispatch header located in LUFA/Drivers/Peripheral/ADC.h.
  38:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  */
  39:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  40:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** /** \ingroup Group_ADC
  41:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *  @defgroup Group_ADC_AVRU4U6U7 Series U4, U6 and U7 Model ADC Driver
  42:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *
  43:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *  ADC driver for the AT90USB1287, AT90USB1286, AT90USB647, AT90USB646, ATMEGA16U4 and ATMEGA32U4 
  44:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *
  45:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  46:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *        dispatch header located in LUFA/Drivers/Peripheral/ADC.h.
  47:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *
  48:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  *  @{
  49:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  */
  50:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h ****  
  51:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** #ifndef __ADC_AVRU4U6U7_H__
  52:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** #define __ADC_AVRU4U6U7_H__
  53:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  54:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 	/* Includes: */
  55:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		#include "../../../Common/Common.h"
  56:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		
  57:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		#include <avr/io.h>
  58:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		#include <stdbool.h>
  59:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		
  60:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 	/* Enable C linkage for C++ Compilers: */
  61:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		#if defined(__cplusplus)
  62:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			extern "C" {
  63:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		#endif
  64:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  65:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 	/* Preprocessor Checks: */
  66:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		#if !defined(__INCLUDE_FROM_ADC_H)
  67:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Peripheral/ADC.h instead.
  68:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		#endif
  69:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  70:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 	/* Public Interface - May be used in end-application: */
  71:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		/* Macros: */			
  72:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Reference mask, for using the voltage present at the AVR's AREF pin for the ADC reference. *
  73:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_REFERENCE_AREF              0
  74:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  75:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Reference mask, for using the voltage present at the AVR's AVCC pin for the ADC reference. *
  76:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_REFERENCE_AVCC              (1 << REFS0)
  77:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  78:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Reference mask, for using the internally generated 2.56V reference voltage as the ADC refere
  79:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_REFERENCE_INT2560MV         ((1 << REFS1) | (1 << REFS0))
  80:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
  81:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Left-adjusts the 10-bit ADC result, so that the upper 8 bits of the value returned by the
  82:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  ADC_GetResult() macro contain the 8 most significant bits of the result. */
  83:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_LEFT_ADJUSTED               (1 << ADLAR)
  84:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  85:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Right-adjusts the 10-bit ADC result, so that the lower 8 bits of the value returned by the
  86:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  ADC_GetResult() macro contain the 8 least significant bits of the result. */
  87:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_RIGHT_ADJUSTED              (0 << ADLAR)
  88:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
  89:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC mode to free running, so that conversions take place continuously as fast as th
  90:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  is capable of at the given input clock speed. */
  91:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_FREE_RUNNING                (1 << ADATE)
  92:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
  93:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC mode to single conversion, so that only a single conversion will take place bef
  94:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  the ADC returns to idle. */
  95:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_SINGLE_CONVERSION           (0 << ADATE)
  96:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
  97:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC input clock to prescale by a factor of 2 the AVR's system clock. */
  98:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_PRESCALE_2                  (1 << ADPS0)
  99:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 100:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC input clock to prescale by a factor of 4 the AVR's system clock. */
 101:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_PRESCALE_4                  (1 << ADPS1)
 102:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 103:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC input clock to prescale by a factor of 8 the AVR's system clock. */
 104:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_PRESCALE_8                  ((1 << ADPS0) | (1 << ADPS1))
 105:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 106:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC input clock to prescale by a factor of 16 the AVR's system clock. */
 107:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_PRESCALE_16                 (1 << ADPS2)
 108:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 109:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC input clock to prescale by a factor of 32 the AVR's system clock. */
 110:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_PRESCALE_32                 ((1 << ADPS2) | (1 << ADPS0))
 111:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 112:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC input clock to prescale by a factor of 64 the AVR's system clock. */
 113:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_PRESCALE_64                 ((1 << ADPS2) | (1 << ADPS1))
 114:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 115:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Sets the ADC input clock to prescale by a factor of 128 the AVR's system clock. */
 116:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_PRESCALE_128                ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0))
 117:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
 118:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			//@{
 119:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** MUX mask define for the ADC0 channel of the ADC. See \ref ADC_StartReading and \ref ADC_GetC
 120:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_CHANNEL0                    (0x00 << MUX0)
 121:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 122:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** MUX mask define for the ADC1 channel of the ADC. See \ref ADC_StartReading and \ref ADC_GetC
 123:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_CHANNEL1                    (0x01 << MUX0)
 124:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 125:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#if !(defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
 126:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC2 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Get
 127:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 128:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 129:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 130:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL2                (0x02 << MUX0)
 131:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 132:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC3 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Get
 133:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 134:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 135:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 136:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL3                (0x03 << MUX0)
 137:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#endif
 138:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 139:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** MUX mask define for the ADC4 channel of the ADC. See \ref ADC_StartReading and \ref ADC_GetC
 140:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_CHANNEL4                    (0x04 << MUX0)
 141:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 142:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** MUX mask define for the ADC5 channel of the ADC. See \ref ADC_StartReading and \ref ADC_GetC
 143:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_CHANNEL5                    (0x05 << MUX0)
 144:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 145:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** MUX mask define for the ADC6 channel of the ADC. See \ref ADC_StartReading and \ref ADC_GetC
 146:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_CHANNEL6                    (0x06 << MUX0)
 147:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 148:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** MUX mask define for the ADC7 channel of the ADC. See \ref ADC_StartReading and \ref ADC_GetC
 149:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_CHANNEL7                    (0x07 << MUX0)
 150:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 151:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** MUX mask define for the internal 1.1V bandgap channel of the ADC. See \ref ADC_StartReading 
 152:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#define ADC_1100MV_BANDGAP              (0x1E << MUX0)
 153:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
 154:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
 155:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC8 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Get
 156:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 157:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 158:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 159:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL8                ((1 << 8) | (0x00 << MUX0))
 160:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 161:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC9 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Get
 162:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 163:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 164:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 165:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL9                ((1 << 8) | (0x01 << MUX0))
 166:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 167:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC10 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Ge
 168:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 169:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 170:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 171:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL10               ((1 << 8) | (0x02 << MUX0))
 172:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 173:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC11 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Ge
 174:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 175:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 176:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 177:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL11               ((1 << 8) | (0x03 << MUX0))
 178:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 179:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC12 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Ge
 180:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 181:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 182:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 183:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL12               ((1 << 8) | (0x04 << MUX0))
 184:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 185:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the ADC13 channel of the ADC. See \ref ADC_StartReading and \ref ADC_Ge
 186:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 187:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 188:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 189:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_CHANNEL13               ((1 << 8) | (0x05 << MUX0))
 190:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 191:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				/** MUX mask define for the internal temperature sensor channel of the ADC. See \ref ADC_StartR
 192:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \ref ADC_GetChannelReading.
 193:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *
 194:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 *  \note Not available on all AVR models.
 195:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				 */
 196:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#define ADC_INT_TEMP_SENS           ((1 << 8) | (0x07 << MUX0))
 197:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			#endif
 198:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			//@}
 199:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
 200:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 		/* Inline Functions: */
 201:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Configures the given ADC channel, ready for ADC conversions. This function sets the
 202:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  associated port pin as an input and disables the digital portion of the I/O to reduce
 203:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  power consumption.
 204:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 205:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \note This must only be called for ADC channels with are connected to a physical port
 206:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *        pin of the AVR, denoted by its special alternative function ADCx.
 207:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *        \n\n
 208:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 209:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \note The channel number must be specified as an integer, and NOT a ADC_CHANNELx mask.
 210:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 211:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \param[in] Channel  ADC channel number to set up for conversions.
 212:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 */
 213:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline void ADC_SetupChannel(const uint8_t Channel)
 214:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			{
 215:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
 216:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
 217:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					 defined(__AVR_ATmega32U6__))				
 218:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				DDRF  &= ~(1 << Channel);
 219:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				DIDR0 |=  (1 << Channel);
 220:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 221:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				if (Channel < 8)
 222:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 223:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRF  &= ~(1 << Channel);
 224:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR0 |=  (1 << Channel);
 225:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 226:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				else if (Channel == 8)
 227:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 228:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRD  &= ~(1 << 4);
 229:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR2 |=  (1 << 0);
 230:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 231:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				else if (Channel < 11)
 232:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 233:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRD  &= ~(1 << (Channel - 3));
 234:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR2 |=  (1 << (Channel - 8));
 235:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 236:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				else
 237:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 238:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRB  &= ~(1 << (Channel - 7));
 239:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR2 |=  (1 << (Channel - 8));
 240:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 241:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#endif
 242:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			}
 243:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
 244:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** De-configures the given ADC channel, re-enabling digital I/O mode instead of analog. This
 245:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  function sets the associated port pin as an input and re-enabled the digital portion of
 246:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  the I/O.
 247:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 248:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \note This must only be called for ADC channels with are connected to a physical port
 249:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *        pin of the AVR, denoted by its special alternative function ADCx.
 250:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *        \n\n
 251:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 252:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \note The channel number must be specified as an integer, and NOT a ADC_CHANNELx mask.
 253:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 254:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \param[in] Channel  ADC channel number to set up for conversions.
 255:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 */
 256:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline void ADC_DisableChannel(const uint8_t Channel)
 257:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			{
 258:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
 259:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
 260:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					 defined(__AVR_ATmega32U6__))				
 261:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				DDRF  &= ~(1 << Channel);
 262:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				DIDR0 &= ~(1 << Channel);
 263:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 264:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				if (Channel < 8)
 265:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 266:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRF  &= ~(1 << Channel);
 267:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR0 &= ~(1 << Channel);
 268:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 269:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				else if (Channel == 8)
 270:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 271:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRD  &= ~(1 << 4);
 272:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR2 &= ~(1 << 0);
 273:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 274:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				else if (Channel < 11)
 275:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 276:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRD  &= ~(1 << (Channel - 3));
 277:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR2 &= ~(1 << (Channel - 8));
 278:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 279:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				else
 280:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				{
 281:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DDRB  &= ~(1 << (Channel - 7));
 282:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 					DIDR2 &= ~(1 << (Channel - 8));
 283:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				}
 284:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#endif
 285:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			}
 286:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 287:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Starts the reading of the given channel, but does not wait until the conversion has complete
 288:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  Once executed, the conversion status can be determined via the \ref ADC_IsReadingComplete() 
 289:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  the result read via the \ref ADC_GetResult() macro.
 290:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 291:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  If the ADC has been initialized in free running mode, calling this function once will begin 
 292:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  conversions. If the ADC is in single conversion mode (or the channel to convert from is to b
 293:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  this function must be called each time a conversion is to take place.
 294:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 295:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \param[in] MUXMask  Mask comprising of an ADC channel mask, reference mask and adjustment ma
 296:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 */
 297:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline void ADC_StartReading(const uint16_t MUXMask)
 298:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			{
 299:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADMUX = MUXMask;
 300:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				
 301:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
 302:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				if (MUXMask & (1 << 8))
 303:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				  ADCSRB |=  (1 << MUX5);
 304:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				else
 305:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				  ADCSRB &= ~(1 << MUX5);
 306:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				#endif
 307:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
 308:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADCSRA |= (1 << ADSC);
 309:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			}
 310:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 311:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Indicates if the current ADC conversion is completed, or still in progress.
 312:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 313:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \return Boolean false if the reading is still taking place, or true if the conversion is
 314:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *          complete and ready to be read out with \ref ADC_GetResult().
 315:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 */
 316:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 317:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline bool ADC_IsReadingComplete(void)
 318:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			{
 319:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				return ((ADCSRA & (1 << ADIF)) ? true : false);
 320:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			}
 321:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			
 322:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Retrieves the conversion value of the last completed ADC conversion and clears the reading
 323:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  completion flag.
 324:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 325:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \return The result of the last ADC conversion as an unsigned value.
 326:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 */
 327:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 328:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline uint16_t ADC_GetResult(void)
 329:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			{
 330:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADCSRA |= (1 << ADIF);
 331:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				return ADC;
 332:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			}
 333:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 334:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Performs a complete single reading from channel, including a polling spin-loop to wait for t
 335:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  conversion to complete, and the returning of the converted value.
 336:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 337:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \note For free running mode, the automated conversions should be initialized with a single c
 338:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *        to \ref ADC_StartReading() to select the channel and begin the automated conversions, 
 339:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *        the results read directly from the \ref ADC_GetResult() instead to reduce overhead.
 340:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 341:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \param[in] MUXMask  Mask comprising of an ADC channel mask, reference mask and adjustment ma
 342:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 */
 343:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
 344:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
 345:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			{
 346:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADC_StartReading(MUXMask);
 347:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 	
 348:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				while (!(ADC_IsReadingComplete()));
 349:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 	
 350:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				return ADC_GetResult();
 351:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			}
 352:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 
 353:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			/** Initialises the ADC, ready for conversions. This must be called before any other ADC operati
 354:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  The "mode" parameter should be a mask comprised of a conversion mode (free running or single
 355:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  prescaler masks.
 356:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *
 357:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 *  \param[in] Mode  Mask of ADC settings, including adjustment, prescale, mode and reference.
 358:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			 */
 359:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
 360:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			static inline void ADC_Init(uint8_t Mode)
 361:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 			{
 362:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADCSRA = ((1 << ADEN) | Mode);
  96               		.loc 4 362 0
  97 0038 EAE7      		ldi r30,lo8(122)
  98 003a F0E0      		ldi r31,0
  99 003c 85EA      		ldi r24,lo8(-91)
 100 003e 8083      		st Z,r24
 101               	.LVL3:
 102               	.LBE50:
 103               	.LBE49:
 104               	.LBB51:
 105               	.LBB52:
 218:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				DDRF  &= ~(1 << Channel);
 106               		.loc 4 218 0
 107 0040 8298      		cbi 0x10,2
 219:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				DIDR0 |=  (1 << Channel);
 108               		.loc 4 219 0
 109 0042 AEE7      		ldi r26,lo8(126)
 110 0044 B0E0      		ldi r27,0
 111 0046 8C91      		ld r24,X
 112 0048 8460      		ori r24,lo8(4)
 113 004a 8C93      		st X,r24
 114               	.LVL4:
 115               	.LBE52:
 116               	.LBE51:
 117               	.LBB53:
 118               	.LBB54:
 299:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADMUX = MUXMask;
 119               		.loc 4 299 0
 120 004c 82E4      		ldi r24,lo8(66)
 121 004e 8093 7C00 		sts 124,r24
 308:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADCSRA |= (1 << ADSC);
 122               		.loc 4 308 0
 123 0052 8081      		ld r24,Z
 124 0054 8064      		ori r24,lo8(64)
 125 0056 8083      		st Z,r24
 126 0058 0895      		ret
 127               	.LBE54:
 128               	.LBE53:
 129               		.cfi_endproc
 130               	.LFE97:
 132               		.section	.text.ProcessNextSample,"ax",@progbits
 133               	.global	ProcessNextSample
 135               	ProcessNextSample:
 136               	.LFB98:
  86:AudioInput.c  **** 	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
  87:AudioInput.c  **** 	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
  88:AudioInput.c  **** 	
  89:AudioInput.c  **** 	/* Start the ADC conversion in free running mode */
  90:AudioInput.c  **** 	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | MIC_IN_ADC_MUX_MASK);
  91:AudioInput.c  **** }
  92:AudioInput.c  **** 
  93:AudioInput.c  **** /** Processes the next audio sample by reading the last ADC conversion and writing it to the audio
  94:AudioInput.c  ****  *  interface, each time the sample reload timer period elapses to give a constant sample rate.
  95:AudioInput.c  ****  */
  96:AudioInput.c  **** void ProcessNextSample(void)
  97:AudioInput.c  **** {
 137               		.loc 2 97 0
 138               		.cfi_startproc
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
  98:AudioInput.c  **** 	/* Check if the sample reload timer period has elapsed, and that the USB bus is ready for a new sa
  99:AudioInput.c  **** 	if ((TIFR0 & (1 << OCF0A)) && Audio_Device_IsReadyForNextSample(&Microphone_Audio_Interface))
 143               		.loc 2 99 0
 144 0000 A99B      		sbis 0x15,1
 145 0002 00C0      		rjmp .L3
 146               	.LVL5:
 147               	.LBB55:
 148               	.LBB56:
 149               		.file 5 "../../../../LUFA/Drivers/USB/Class/Device/Audio.h"
   1:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** /*
   2:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****              LUFA Library
   3:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****      Copyright (C) Dean Camera, 2010.
   4:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****               
   5:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****       www.fourwalledcubicle.com
   7:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** */
   8:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
   9:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** /*
  10:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  12:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   without fee, provided that the above copyright notice appear in 
  15:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   documentation, and that the name of the author not be used in 
  18:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   advertising or publicity pertaining to distribution of the 
  19:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  21:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****   this software.
  29:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** */
  30:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  31:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** /** \file
  32:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  \brief Device mode driver for the library USB Audio Class driver.
  33:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *
  34:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  Device mode driver for the library USB Audio Class driver.
  35:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *
  36:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *        dispatch header located in LUFA/Drivers/USB/Class/Audio.h.
  38:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  */
  39:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  40:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** /** \ingroup Group_USBClassAudio
  41:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  @defgroup Group_USBClassAudioDevice Audio Class Device Mode Driver
  42:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *
  43:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  \section Sec_Dependencies Module Source Dependencies
  44:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  The following files must be built with any user project that uses this module:
  45:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *    - LUFA/Drivers/USB/Class/Device/Audio.c <i>(Makefile source module name: LUFA_SRC_USBCLASS)</
  46:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *
  47:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  \section Module Description
  48:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  Device Mode USB Class driver framework interface, for the Audio USB Class driver.
  49:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *
  50:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  *  @{
  51:../../../../LUFA/Drivers/USB/Class/Device/Audio.h ****  */
  52:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  53:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** #ifndef _AUDIO_CLASS_DEVICE_H_
  54:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** #define _AUDIO_CLASS_DEVICE_H_
  55:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  56:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 	/* Includes: */
  57:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		#include "../../USB.h"
  58:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		#include "../Common/Audio.h"
  59:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		
  60:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		#include <string.h>
  61:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  62:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		#if defined(__cplusplus)
  64:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			extern "C" {
  65:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		#endif
  66:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  67:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 	/* Preprocessor Checks: */
  68:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		#if !defined(__INCLUDE_FROM_AUDIO_DRIVER)
  69:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Class/Audio.h instead.
  70:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		#endif
  71:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  72:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 	/* Public Interface - May be used in end-application: */
  73:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		/* Type Defines: */
  74:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** \brief Audio Class Device Mode Configuration and State Structure.
  75:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
  76:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  Class state structure. An instance of this structure should be made for each Audio interface
  77:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  within the user application, and passed to each of the Audio class driver functions as the
  78:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  AudioInterfaceInfo parameter. This stores each Audio interface's configuration and state inf
  79:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
  80:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			typedef struct
  81:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
  82:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				const struct
  83:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				{
  84:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					uint8_t  StreamingInterfaceNumber; /**< Index of the Audio Streaming interface within the devi
  85:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 														*   structure controls.
  86:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 														*/
  87:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  88:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					uint8_t  DataINEndpointNumber; /**< Endpoint number of the incoming Audio Streaming data, if a
  89:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 													*   (zero if unused).
  90:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 													*/
  91:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					uint16_t DataINEndpointSize; /**< Size in bytes of the incoming Audio Streaming data endpoint,
  92:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 												  *   (zero if unused).
  93:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 												  */
  94:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
  95:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					uint8_t  DataOUTEndpointNumber; /**< Endpoint number of the outgoing Audio Streaming data, if 
  96:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 													 *   (zero if unused).
  97:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 													 */
  98:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					uint16_t DataOUTEndpointSize; /**< Size in bytes of the outgoing Audio Streaming data endpoint
  99:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 												   *   (zero if unused).
 100:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 												   */			
 101:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				} Config; /**< Config data for the USB class interface within the device. All elements in this 
 102:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				           *   <b>must</b> be set or the interface will fail to enumerate and operate correctly
 103:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				           */
 104:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				struct
 105:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				{
 106:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					bool     InterfaceEnabled; /**< Set and cleared by the class driver to indicate if the host ha
 107:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 												*   of the Audio Streaming interface.
 108:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 												*/
 109:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				} State; /**< State data for the USB class interface within the device. All elements in this se
 110:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				          *   are reset to their defaults when the interface is enumerated.
 111:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				          */				
 112:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			} USB_ClassInfo_Audio_Device_t;
 113:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		
 114:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		/* Function Prototypes: */
 115:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Configures the endpoints of a given Audio interface, ready for use. This should be linked to
 116:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \ref EVENT_USB_Device_ConfigurationChanged() event so that the endpoints are configured when
 117:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  given Audio interface is selected.
 118:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 119:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 120:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 121:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \return Boolean true if the endpoints were successfully configured, false otherwise.
 122:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 123:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo) ATT
 124:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 125:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Processes incoming control requests from the host, that are directed to the given Audio clas
 126:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  linked to the library \ref EVENT_USB_Device_UnhandledControlRequest() event.
 127:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 128:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 129:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 130:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo) 
 131:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			
 132:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 		/* Inline Functions: */		
 133:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** General management task for a given Audio class interface, required for the correct operatio
 134:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  be called frequently in the main program loop, before the master USB management task \ref US
 135:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 136:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 137:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 138:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline void Audio_Device_USBTask(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
 139:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                        ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
 140:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline void Audio_Device_USBTask(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
 141:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 142:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				(void)AudioInterfaceInfo;
 143:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			}
 144:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 145:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Determines if the given audio interface is ready for a sample to be read from it, and select
 146:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  OUT endpoint ready for reading.
 147:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 148:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \pre This function must only be called when the Device state machine is in the DEVICE_STATE_
 149:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *       the call will fail.
 150:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 151:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 152:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 153:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \return Boolean true if the given Audio interface has a sample to be read, false otherwise.
 154:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 155:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterf
 156:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                                 ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
 157:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterf
 158:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 159:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				if ((USB_DeviceState != DEVICE_STATE_Configured) || !(AudioInterfaceInfo->State.InterfaceEnable
 160:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				  return false;
 161:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				
 162:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				Endpoint_SelectEndpoint(AudioInterfaceInfo->Config.DataOUTEndpointNumber);	
 163:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				return Endpoint_IsOUTReceived();
 164:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			}
 165:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 166:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Determines if the given audio interface is ready to accept the next sample to be written to 
 167:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  the streaming IN endpoint ready for writing.
 168:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 169:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \pre This function must only be called when the Device state machine is in the DEVICE_STATE_
 170:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *       the call will fail.
 171:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 172:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 173:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 174:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \return Boolean true if the given Audio interface is ready to accept the next sample, false 
 175:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 176:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline bool Audio_Device_IsReadyForNextSample(USB_ClassInfo_Audio_Device_t* const AudioIn
 177:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                                     ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE
 178:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline bool Audio_Device_IsReadyForNextSample(USB_ClassInfo_Audio_Device_t* const AudioIn
 179:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 180:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				if ((USB_DeviceState != DEVICE_STATE_Configured) || !(AudioInterfaceInfo->State.InterfaceEnable
 150               		.loc 5 180 0
 151 0004 8091 0000 		lds r24,USB_DeviceState
 152 0008 8430      		cpi r24,lo8(4)
 153 000a 01F4      		brne .L3
 154 000c 8091 0000 		lds r24,Microphone_Audio_Interface+7
 155 0010 8823      		tst r24
 156 0012 01F0      		breq .L3
 181:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				  return false;
 182:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				
 183:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				Endpoint_SelectEndpoint(AudioInterfaceInfo->Config.DataINEndpointNumber);
 157               		.loc 5 183 0
 158 0014 8091 0000 		lds r24,Microphone_Audio_Interface+1
 159               	.LVL6:
 160               	.LBB57:
 161               	.LBB58:
 162               		.file 6 "../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h"
   1:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****               
   5:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
   8:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
   9:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  12:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in 
  15:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in 
  18:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the 
  19:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  21:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
  30:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  31:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  41:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  42:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  43:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  45:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  46:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  47:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  48:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @{
  49:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  50:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  51:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  52:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  53:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  54:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  55:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  
  56:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  57:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  58:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  59:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  60:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  61:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */ 
  62:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  63:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  64:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointStreamRW Read/Write of Multi-Byte Streams
  65:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  66:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of data strea
  67:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  and to endpoints.
  68:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */ 
  69:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  70:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  71:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  72:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  73:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  74:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  75:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  76:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  77:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  78:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  79:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  80:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/pgmspace.h>
  81:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/eeprom.h>
  82:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  83:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  84:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  85:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  86:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  87:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  88:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
  89:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#include "../HighLevel/StreamCallbacks.h"
  90:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  91:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
  92:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  93:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  94:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  95:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  96:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  97:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  98:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  99:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
 100:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
 101:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 102:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 103:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 104:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 105:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 106:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 107:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                      (0 << EPDIR)
 108:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 109:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 110:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 111:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 112:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                       (1 << EPDIR)
 113:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 114:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 115:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 116:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 117:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 118:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 119:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                  (0 << EPBK0)
 120:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 121:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 122:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 123:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 124:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 125:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 126:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                  (1 << EPBK0)
 127:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 128:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 129:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 130:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 131:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                    0
 132:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 133:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 134:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 135:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 136:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 */
 137:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE   8
 138:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 139:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 140:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 141:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 142:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 143:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                   0x07
 144:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 145:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 146:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 147:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 148:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                   0x80
 149:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 150:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 151:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 152:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 153:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                  0x7F
 154:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 155:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 156:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 157:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 158:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */				
 159:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(n)                  _ENDPOINT_GET_MAXSIZE(n)
 160:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 161:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates if the given endpoint supports double banking.
 162:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 163:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 164:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */				
 165:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DOUBLEBANK_SUPPORTED(n)      _ENDPOINT_GET_DOUBLEBANK(n)
 166:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 167:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE)
 168:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 169:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 170:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 171:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 172:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					 */
 173:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      7
 174:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 175:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      5
 176:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 177:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#else
 178:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS          1
 179:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 180:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 181:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 182:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 183:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 184:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 185:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 186:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 187:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 188:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 189:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 190:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 191:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 192:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 193:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 194:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 195:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 196:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 197:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 198:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 199:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 200:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 201:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 202:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 203:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 204:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 205:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Stream_* functions.
 206:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 207:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 208:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 209:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_Stream_RW_ErrorCodes_t
 210:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 211:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 212:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_EndpointStalled    = 1, /**< The endpoint was stalled during the stream
 213:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   transfer by the host or device.
 214:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 215:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 216:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   the transfer.
 217:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 218:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 219:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   no USB endpoint traffic can occur until the bus
 220:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   has resumed.
 221:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 222:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_Timeout            = 4, /**< The host failed to accept or send the next packe
 223:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   within the software timeout period set by the
 224:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           *   \ref USB_STREAM_TIMEOUT_MS macro.
 225:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 226:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_CallbackAborted    = 5, /**< Indicates that the stream's callback function
 227:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                               *   aborted the transfer early.
 228:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 229:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 230:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 231:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Control_Stream_* functions..
 232:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 233:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 234:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 235:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_ControlStream_RW_ErrorCodes_t
 236:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 237:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 238:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_HostAborted        = 1, /**< The aborted the transfer prematurely. */
 239:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 240:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   the transfer.
 241:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 242:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 243:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   no USB endpoint traffic can occur until the bus
 244:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            *   has resumed.
 245:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 246:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 247:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 248:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 249:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 250:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 252:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 253:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 255:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 256:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 257:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 258:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 259:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 260:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 261:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 262:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 263:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 264:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 265:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 266:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 267:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 268:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 269:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		
 270:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 271:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 272:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 273:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 274:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 275:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 276:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 277:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 278:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 279:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 280:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 281:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 282:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 283:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 284:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 285:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 286:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 287:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 288:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 289:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 290:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 291:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 292:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 293:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 294:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 295:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 296:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 297:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 298:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 299:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 163               		.loc 6 299 0
 164 0018 8093 E900 		sts 233,r24
 165               	.LBE58:
 166               	.LBE57:
 167               	.LBB59:
 168               	.LBB60:
 300:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 301:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 302:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 303:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 304:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 305:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 307:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 308:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 309:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 310:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 311:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 312:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 313:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 314:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 315:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 316:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 317:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 318:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 319:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 320:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 321:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 322:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 323:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 324:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 325:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 326:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 327:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 328:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 329:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 330:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 331:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 332:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 333:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 334:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 335:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 336:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 337:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 338:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 339:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 340:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 341:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 342:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 343:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 344:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 345:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 346:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 347:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 348:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 349:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 350:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 351:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 352:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 353:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 354:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 355:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 356:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 357:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 358:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 359:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 360:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 361:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 362:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 363:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 364:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 365:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 366:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 367:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 368:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 369:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 370:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 371:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 372:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 373:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 374:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 375:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 376:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 377:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 378:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 379:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 380:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 381:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 382:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 383:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 384:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 385:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 386:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 387:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 388:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 389:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 390:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 391:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 392:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 393:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 394:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 395:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 396:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet.
 397:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 398:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 399:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 400:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 401:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 402:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 403:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 404:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 405:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI))  ? true : false);
 169               		.loc 6 405 0
 170 001c 8091 E800 		lds r24,232
 171               	.LVL7:
 172               	.LBE60:
 173               	.LBE59:
 174               	.LBE56:
 175               	.LBE55:
 176               		.loc 2 99 0
 177 0020 80FF      		sbrs r24,0
 178 0022 00C0      		rjmp .L3
 179               	.LBB61:
 100:AudioInput.c  **** 	{
 101:AudioInput.c  **** 		/* Clear the sample reload timer compare flag, ready for the next interval */
 102:AudioInput.c  **** 		TIFR0 |= (1 << OCF0A);
 180               		.loc 2 102 0
 181 0024 A99A      		sbi 0x15,1
 182               	.LBB62:
 183               	.LBB63:
 330:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				ADCSRA |= (1 << ADIF);
 184               		.loc 4 330 0
 185 0026 8091 7A00 		lds r24,122
 186 002a 8061      		ori r24,lo8(16)
 187 002c 8093 7A00 		sts 122,r24
 331:../../../../LUFA/Drivers/Peripheral/AVRU4U6U7/ADC.h **** 				return ADC;
 188               		.loc 4 331 0
 189 0030 8091 7800 		lds r24,120
 190 0034 9091 7900 		lds r25,120+1
 191               	.LVL8:
 192               	.LBE63:
 193               	.LBE62:
 103:AudioInput.c  **** 
 104:AudioInput.c  **** 		/* Audio sample is ADC value scaled to fit the entire range */
 105:AudioInput.c  **** 		int16_t AudioSample = ((SAMPLE_MAX_RANGE / ADC_MAX_RANGE) * ADC_GetResult());
 194               		.loc 2 105 0
 195 0038 26E0      		ldi r18,6
 196               		1:
 197 003a 880F      		lsl r24
 198 003c 991F      		rol r25
 199 003e 2A95      		dec r18
 200 0040 01F4      		brne 1b
 201               	.LVL9:
 106:AudioInput.c  **** 		
 107:AudioInput.c  **** 		#if defined(MICROPHONE_BIASED_TO_HALF_RAIL)
 108:AudioInput.c  **** 		/* Microphone is biased to half rail voltage, subtract the bias from the sample value */
 109:AudioInput.c  **** 		AudioSample -= (SAMPLE_MAX_RANGE / 2);
 202               		.loc 2 109 0
 203 0042 8F5F      		subi r24,-1
 204 0044 9F47      		sbci r25,127
 205               	.LVL10:
 206               	.LBB64:
 207               	.LBB65:
 208               	.LBB66:
 209               	.LBB67:
 406:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 407:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 408:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet.
 409:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 410:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 411:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 412:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 413:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 414:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 415:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 416:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 417:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 418:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 419:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 420:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 421:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 422:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 423:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 424:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 425:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 426:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 427:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 428:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 429:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 430:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 431:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 432:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 433:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 434:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 435:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 436:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 437:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints. 
 438:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 439:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 440:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 441:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 442:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 443:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 444:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 445:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 446:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 447:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 448:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 449:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 450:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 451:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 452:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 453:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 454:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 455:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 456:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 457:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 458:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 460:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 461:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 462:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 463:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 464:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 465:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 466:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 467:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 468:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 469:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 470:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 471:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);	
 472:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 473:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 474:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 475:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 476:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 477:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 478:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 479:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 480:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 481:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 482:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 483:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 484:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 485:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 486:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 487:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 488:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 489:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 490:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 491:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 492:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 493:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 494:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 495:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 496:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 497:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 498:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 499:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 500:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 501:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 502:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 503:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 504:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 505:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 506:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 507:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 508:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 509:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 510:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 511:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 512:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 513:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 514:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 515:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 516:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 517:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 518:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 519:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 520:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 521:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 522:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 523:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 524:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 525:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 526:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 527:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 528:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 529:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 530:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 531:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 532:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 533:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 534:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 535:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 536:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 537:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 538:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 539:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 540:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 541:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 542:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 543:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 544:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 545:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 546:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 547:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 548:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 549:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 550:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
 551:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 552:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 553:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 554:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 555:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 556:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 557:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 558:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 559:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 560:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 561:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 562:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 563:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 564:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 565:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 566:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 567:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 568:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 569:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
 570:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void)
 571:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 572:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 573:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				
 574:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 575:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 576:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 577:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 578:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 579:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 580:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 581:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 582:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 583:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 584:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 585:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void)
 586:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 587:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				union
 588:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				{
 589:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 590:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 591:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 592:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				
 593:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 594:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 595:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 596:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 597:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 598:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 599:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 600:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 601:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 602:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 603:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 604:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 605:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 606:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 607:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void)
 608:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 609:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				union
 610:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				{
 611:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 612:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 613:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 614:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				
 615:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 616:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 617:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			
 618:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 619:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 620:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 621:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 622:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 623:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 624:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 625:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 626:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 627:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 628:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 629:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
 630:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 631:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 210               		.loc 6 631 0
 211 0046 8093 F100 		sts 241,r24
 632:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 212               		.loc 6 632 0
 213 004a 9093 F100 		sts 241,r25
 214               	.LBE67:
 215               	.LBE66:
 216               	.LBB68:
 217               	.LBB69:
 262:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 218               		.loc 6 262 0
 219 004e 2091 F200 		lds r18,242
 220 0052 3091 F300 		lds r19,242+1
 221               	.LBE69:
 222               	.LBE68:
 184:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				return Endpoint_IsINReady();
 185:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			}
 186:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 187:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Reads the next 8-bit audio sample from the current audio interface.
 188:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 189:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \pre This should be preceded immediately by a call to the \ref Audio_Device_IsSampleReceived
 190:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *       ensure the correct endpoint is selected and ready for data.
 191:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 192:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 193:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 194:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \return  Signed 8-bit audio sample from the audio interface.
 195:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 196:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline int8_t Audio_Device_ReadSample8(USB_ClassInfo_Audio_Device_t* const AudioInterface
 197:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                              ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
 198:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline int8_t Audio_Device_ReadSample8(USB_ClassInfo_Audio_Device_t* const AudioInterface
 199:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 200:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				int8_t Sample;
 201:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				
 202:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				(void)AudioInterfaceInfo;
 203:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 204:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				Sample = Endpoint_Read_Byte();
 205:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 206:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				if (!(Endpoint_BytesInEndpoint()))
 207:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				  Endpoint_ClearOUT();
 208:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				
 209:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				return Sample;
 210:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			}
 211:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 212:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Reads the next 16-bit audio sample from the current audio interface.
 213:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 214:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \pre This should be preceded immediately by a call to the \ref Audio_Device_IsSampleReceived
 215:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *       that the correct endpoint is selected and ready for data.
 216:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 217:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 218:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 219:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \return  Signed 16-bit audio sample from the audio interface.
 220:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 221:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline int16_t Audio_Device_ReadSample16(USB_ClassInfo_Audio_Device_t* const AudioInterfa
 222:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                                ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
 223:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline int16_t Audio_Device_ReadSample16(USB_ClassInfo_Audio_Device_t* const AudioInterfa
 224:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 225:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				int16_t Sample;
 226:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 227:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				(void)AudioInterfaceInfo;
 228:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 229:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				Sample = (int16_t)Endpoint_Read_Word_LE();
 230:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					  
 231:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				if (!(Endpoint_BytesInEndpoint()))
 232:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				  Endpoint_ClearOUT();
 233:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 234:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				return Sample;
 235:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			}
 236:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 237:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Reads the next 24-bit audio sample from the current audio interface.
 238:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 239:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \pre This should be preceded immediately by a call to the \ref Audio_Device_IsSampleReceived
 240:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *       that the correct endpoint is selected and ready for data.
 241:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 242:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 243:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 244:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \return Signed 24-bit audio sample from the audio interface.
 245:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 246:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline int32_t Audio_Device_ReadSample24(USB_ClassInfo_Audio_Device_t* const AudioInterfa
 247:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                                ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
 248:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline int32_t Audio_Device_ReadSample24(USB_ClassInfo_Audio_Device_t* const AudioInterfa
 249:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 250:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				int32_t Sample;
 251:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 252:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				(void)AudioInterfaceInfo;
 253:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 254:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				Sample = (((uint32_t)Endpoint_Read_Byte() << 16) | Endpoint_Read_Word_LE());
 255:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 					  
 256:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				if (!(Endpoint_BytesInEndpoint()))
 257:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				  Endpoint_ClearOUT();
 258:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 259:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				return Sample;
 260:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			}
 261:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 262:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Writes the next 8-bit audio sample to the current audio interface.
 263:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 264:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \pre This should be preceded immediately by a call to the \ref Audio_Device_IsReadyForNextSa
 265:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *       ensure that the correct endpoint is selected and ready for data.
 266:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 267:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 268:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in]     Sample              Signed 8-bit audio sample.
 269:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 270:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline void Audio_Device_WriteSample8(USB_ClassInfo_Audio_Device_t* const AudioInterfaceI
 271:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                             const int8_t Sample) ATTR_NON_NULL_PTR_ARG(1) ATTR_
 272:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline void Audio_Device_WriteSample8(USB_ClassInfo_Audio_Device_t* const AudioInterfaceI
 273:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                             const int8_t Sample)
 274:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 275:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				Endpoint_Write_Byte(Sample);
 276:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 277:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				if (Endpoint_BytesInEndpoint() == AudioInterfaceInfo->Config.DataINEndpointSize)
 278:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				  Endpoint_ClearIN();
 279:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			}
 280:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 281:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			/** Writes the next 16-bit audio sample to the current audio interface.
 282:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 283:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \pre This should be preceded immediately by a call to the \ref Audio_Device_IsReadyForNextSa
 284:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *       ensure that the correct endpoint is selected and ready for data.
 285:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *
 286:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in,out] AudioInterfaceInfo  Pointer to a structure containing an Audio Class configur
 287:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 *  \param[in]     Sample              Signed 16-bit audio sample.
 288:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			 */
 289:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline void Audio_Device_WriteSample16(USB_ClassInfo_Audio_Device_t* const AudioInterface
 290:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                              const int16_t Sample) ATTR_NON_NULL_PTR_ARG(1) ATT
 291:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			static inline void Audio_Device_WriteSample16(USB_ClassInfo_Audio_Device_t* const AudioInterface
 292:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			                                              const int16_t Sample)
 293:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 			{
 294:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				Endpoint_Write_Word_LE(Sample);
 295:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 
 296:../../../../LUFA/Drivers/USB/Class/Device/Audio.h **** 				if (Endpoint_BytesInEndpoint() == AudioInterfaceInfo->Config.DataINEndpointSize)
 223               		.loc 5 296 0
 224 0056 8091 0000 		lds r24,Microphone_Audio_Interface+2
 225 005a 9091 0000 		lds r25,Microphone_Audio_Interface+2+1
 226               	.LVL11:
 227 005e 2817      		cp r18,r24
 228 0060 3907      		cpc r19,r25
 229 0062 01F4      		brne .L3
 230               	.LBB70:
 231               	.LBB71:
 454:../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 232               		.loc 6 454 0
 233 0064 8091 E800 		lds r24,232
 234 0068 8E77      		andi r24,lo8(126)
 235 006a 8093 E800 		sts 232,r24
 236               	.LVL12:
 237               	.L3:
 238 006e 0895      		ret
 239               	.LBE71:
 240               	.LBE70:
 241               	.LBE65:
 242               	.LBE64:
 243               	.LBE61:
 244               		.cfi_endproc
 245               	.LFE98:
 247               		.section	.text.startup.main,"ax",@progbits
 248               	.global	main
 250               	main:
 251               	.LFB96:
  58:AudioInput.c  **** {
 252               		.loc 2 58 0
 253               		.cfi_startproc
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256               	/* stack size = 0 */
 257               	.L__stack_usage = 0
  59:AudioInput.c  **** 	SetupHardware();
 258               		.loc 2 59 0
 259 0000 0E94 0000 		call SetupHardware
 260               	.LVL13:
  61:AudioInput.c  **** 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 261               		.loc 2 61 0
 262 0004 80E1      		ldi r24,lo8(16)
 263 0006 0E94 0000 		call LEDs_SetAllLEDs
 264               	.LVL14:
  62:AudioInput.c  **** 	sei();
 265               		.loc 2 62 0
 266               	/* #APP */
 267               	 ;  62 "AudioInput.c" 1
 268 000a 7894      		sei
 269               	 ;  0 "" 2
 270               	/* #NOAPP */
 271               	.L15:
  66:AudioInput.c  **** 		ProcessNextSample();
 272               		.loc 2 66 0 discriminator 1
 273 000c 0E94 0000 		call ProcessNextSample
 274               	.LVL15:
  69:AudioInput.c  **** 		USB_USBTask();
 275               		.loc 2 69 0 discriminator 1
 276 0010 0E94 0000 		call USB_USBTask
 277               	.LVL16:
 278 0014 00C0      		rjmp .L15
 279               		.cfi_endproc
 280               	.LFE96:
 282               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 283               	.global	EVENT_USB_Device_Connect
 285               	EVENT_USB_Device_Connect:
 286               	.LFB99:
 110:AudioInput.c  **** 		#endif
 111:AudioInput.c  **** 
 112:AudioInput.c  **** 		Audio_Device_WriteSample16(&Microphone_Audio_Interface, AudioSample);
 113:AudioInput.c  **** 	}
 114:AudioInput.c  **** }
 115:AudioInput.c  **** 
 116:AudioInput.c  **** /** Event handler for the library USB Connection event. */
 117:AudioInput.c  **** void EVENT_USB_Device_Connect(void)
 118:AudioInput.c  **** {
 287               		.loc 2 118 0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
 119:AudioInput.c  **** 	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 293               		.loc 2 119 0
 294 0000 80EA      		ldi r24,lo8(-96)
 295 0002 0E94 0000 		call LEDs_SetAllLEDs
 296               	.LVL17:
 120:AudioInput.c  **** 
 121:AudioInput.c  **** 	/* Sample reload timer initialization */
 122:AudioInput.c  **** 	OCR0A   = (F_CPU / 8 / AUDIO_SAMPLE_FREQUENCY) - 1;
 297               		.loc 2 122 0
 298 0006 83E1      		ldi r24,lo8(19)
 299 0008 87BD      		out 0x27,r24
 123:AudioInput.c  **** 	TCCR0A  = (1 << WGM01);  // CTC mode
 300               		.loc 2 123 0
 301 000a 82E0      		ldi r24,lo8(2)
 302 000c 84BD      		out 0x24,r24
 124:AudioInput.c  **** 	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
 303               		.loc 2 124 0
 304 000e 85BD      		out 0x25,r24
 305 0010 0895      		ret
 306               		.cfi_endproc
 307               	.LFE99:
 309               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 310               	.global	EVENT_USB_Device_Disconnect
 312               	EVENT_USB_Device_Disconnect:
 313               	.LFB100:
 125:AudioInput.c  **** }
 126:AudioInput.c  **** 
 127:AudioInput.c  **** /** Event handler for the library USB Disconnection event. */
 128:AudioInput.c  **** void EVENT_USB_Device_Disconnect(void)
 129:AudioInput.c  **** {
 314               		.loc 2 129 0
 315               		.cfi_startproc
 316               	/* prologue: function */
 317               	/* frame size = 0 */
 318               	/* stack size = 0 */
 319               	.L__stack_usage = 0
 130:AudioInput.c  **** 	/* Stop the sample reload timer */
 131:AudioInput.c  **** 	TCCR0B = 0;
 320               		.loc 2 131 0
 321 0000 15BC      		out 0x25,__zero_reg__
 132:AudioInput.c  **** 
 133:AudioInput.c  **** 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 322               		.loc 2 133 0
 323 0002 80E1      		ldi r24,lo8(16)
 324 0004 0C94 0000 		jmp LEDs_SetAllLEDs
 325               	.LVL18:
 326               		.cfi_endproc
 327               	.LFE100:
 329               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 330               	.global	EVENT_USB_Device_ConfigurationChanged
 332               	EVENT_USB_Device_ConfigurationChanged:
 333               	.LFB101:
 134:AudioInput.c  **** }
 135:AudioInput.c  **** 
 136:AudioInput.c  **** /** Event handler for the library USB Configuration Changed event. */
 137:AudioInput.c  **** void EVENT_USB_Device_ConfigurationChanged(void)
 138:AudioInput.c  **** {
 334               		.loc 2 138 0
 335               		.cfi_startproc
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 139:AudioInput.c  **** 	LEDs_SetAllLEDs(LEDMASK_USB_READY);
 340               		.loc 2 139 0
 341 0000 80E6      		ldi r24,lo8(96)
 342 0002 0E94 0000 		call LEDs_SetAllLEDs
 343               	.LVL19:
 140:AudioInput.c  **** 	
 141:AudioInput.c  **** 	if (!(Audio_Device_ConfigureEndpoints(&Microphone_Audio_Interface)))
 344               		.loc 2 141 0
 345 0006 80E0      		ldi r24,lo8(Microphone_Audio_Interface)
 346 0008 90E0      		ldi r25,hi8(Microphone_Audio_Interface)
 347 000a 0E94 0000 		call Audio_Device_ConfigureEndpoints
 348               	.LVL20:
 349 000e 8111      		cpse r24,__zero_reg__
 350 0010 00C0      		rjmp .L18
 142:AudioInput.c  **** 	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
 351               		.loc 2 142 0
 352 0012 80E9      		ldi r24,lo8(-112)
 353 0014 0C94 0000 		jmp LEDs_SetAllLEDs
 354               	.LVL21:
 355               	.L18:
 356 0018 0895      		ret
 357               		.cfi_endproc
 358               	.LFE101:
 360               		.section	.text.EVENT_USB_Device_UnhandledControlRequest,"ax",@progbits
 361               	.global	EVENT_USB_Device_UnhandledControlRequest
 363               	EVENT_USB_Device_UnhandledControlRequest:
 364               	.LFB102:
 143:AudioInput.c  **** }
 144:AudioInput.c  **** 
 145:AudioInput.c  **** /** Event handler for the library USB Unhandled Control Request event. */
 146:AudioInput.c  **** void EVENT_USB_Device_UnhandledControlRequest(void)
 147:AudioInput.c  **** {
 365               		.loc 2 147 0
 366               		.cfi_startproc
 367               	/* prologue: function */
 368               	/* frame size = 0 */
 369               	/* stack size = 0 */
 370               	.L__stack_usage = 0
 148:AudioInput.c  **** 	Audio_Device_ProcessControlRequest(&Microphone_Audio_Interface);
 371               		.loc 2 148 0
 372 0000 80E0      		ldi r24,lo8(Microphone_Audio_Interface)
 373 0002 90E0      		ldi r25,hi8(Microphone_Audio_Interface)
 374 0004 0C94 0000 		jmp Audio_Device_ProcessControlRequest
 375               	.LVL22:
 376               		.cfi_endproc
 377               	.LFE102:
 379               	.global	Microphone_Audio_Interface
 380               		.data
 383               	Microphone_Audio_Interface:
 384 0000 01        		.byte	1
 385 0001 01        		.byte	1
 386 0002 0001      		.word	256
 387 0004 0000 00   		.zero	3
 388 0007 00        		.zero	1
 389               		.text
 390               	.Letext0:
 391               		.file 7 "/usr/lib/avr/include/stdint.h"
 392               		.file 8 "../../../../LUFA/Drivers/USB/HighLevel/USBTask.h"
 393               		.file 9 "../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h"
 394               		.file 10 "../../../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 AudioInput.c
     /tmp/ccSS8nt3.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSS8nt3.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSS8nt3.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSS8nt3.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccSS8nt3.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSS8nt3.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSS8nt3.s:13     .text.LEDs_SetAllLEDs:0000000000000000 LEDs_SetAllLEDs
     /tmp/ccSS8nt3.s:35     .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/ccSS8nt3.s:135    .text.ProcessNextSample:0000000000000000 ProcessNextSample
     /tmp/ccSS8nt3.s:383    .data:0000000000000000 Microphone_Audio_Interface
     /tmp/ccSS8nt3.s:250    .text.startup.main:0000000000000000 main
     /tmp/ccSS8nt3.s:285    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccSS8nt3.s:312    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccSS8nt3.s:332    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccSS8nt3.s:363    .text.EVENT_USB_Device_UnhandledControlRequest:0000000000000000 EVENT_USB_Device_UnhandledControlRequest

UNDEFINED SYMBOLS
USB_Init
USB_DeviceState
USB_USBTask
Audio_Device_ConfigureEndpoints
Audio_Device_ProcessControlRequest
__do_copy_data
